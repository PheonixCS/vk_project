import logging
import time
import random
from moderation.models import Filter
import requests
from moderation.models import UserDataSubscribe
import ast

log = logging.getLogger('moderation.tasks')



def check_subscribe(token: str, group_id: int, user_ids: list):
    '''–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –ø–∞—á–∫—É –ª—é–¥–µ–π, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –≤ —Å—É—Ç–∫–∏'''
    headers = {
            'Authorization': f'Bearer {token}'
        }
        
    response = requests.post(
            'https://api.vk.com/method/groups.isMember', 
            headers=headers, 
            params={
                'group_id': group_id,
                'user_ids': ','.join(map(str, user_ids)),
                'v':'5.199'
            }
        )
    log.info("user_ids: {}".format(user_ids))
    log.info("Member resp: {}".format(response.json()))
    return response.json()


def get_user_firstname(user_id: int, token: str) -> str:
    '''–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ'''
    headers = {
            'Authorization': f'Bearer {token}'
        }
        
    response = requests.post(
            'https://api.vk.com/method/users.get', 
            headers=headers, 
            params={
                'user_ids': user_id,
                'v':'5.195'}
        ).json()
    log.info("Info about user: {}".format(response['response'][0]))
    return f"[id{user_id}|{response['response'][0]['first_name']}], "

def like_comment(token, user_id, comment_id, group_id):
    headers = {
            'Authorization': f'Bearer {token}'
        }
        
    response = requests.post(
            'https://api.vk.com/method/likes.add', 
            headers=headers, 
            params={
                'type': 'comment',
                'item_id': group_id,
                'owner_id': user_id,
                'from_group': 1,
                'v':'5.195'
            }
        )


def safe_eval(path, variables=None):
    with open(f'media/{path}', 'r', encoding='utf-8') as answers_file:
        expr = answers_file.read()
        if variables is None:
            variables = {}
        parsed_expr = ast.parse(expr, mode='eval')
        code = compile(parsed_expr, '<string>', 'eval')
        return eval(code, {"__builtins__": {}}, variables)


def comment_invite(data):
    '''–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ'''
    # –°–ø–∏–º 1 —Å–µ–∫—É–Ω–¥—É, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–≤–∏—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫
    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¢–û–õ–¨–ö–û 1 —Ä–∞–∑, —Ç–∞–∫ –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–∞–∂–Ω–µ–µ
    time.sleep(2)
    zodiac_groups = {
        54365470: ('–û–í–ï–ù','goroskop_oven1'),
        54365479: ('–¢–ï–õ–ï–¶','goroskop_telec2'),
        54365482: ('–ë–õ–ò–ó–ù–ï–¶–´', 'goroskop_bliznecy3'),
        54365511: ('–†–ê–ö', 'goroskop_rak4'),
        54365524: ('–õ–ï–í', 'goroskop_lev5'),
        54365538: ('–î–ï–í–ê', 'goroskop_deva6'),
        54365550: ('–í–ï–°–´', 'goroskop_vesy7'),
        54365555: ('–°–ö–û–†–ü–ò–û–ù', 'goroskop_skorpion8'),
        54365563: ('–°–¢–†–ï–õ–ï–¶', 'goroskop_strelec9'),
        54365565: ('–ö–û–ó–ï–†–û–ì', 'goroskop_kozerog10'),
        54365575: ('–í–û–î–û–õ–ï–ô', 'goroskop_vodoley11'),
        54365581: ('–†–´–ë–´', 'goroskop_ryby12'),
    }
    headers = {
        'Authorization': f'Bearer {data["token"]}'
    }
    firstname = get_user_firstname(data['params']['user_id'], data['token'])
    # message = f"{firstname}–º—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ [exp.horoscope|–Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ]. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –Ω–∞—Å üôè –ë–õ–ê–ì–û –î–ê–†–Æ!" 
    keywords = Filter.objects.filter(keywords='—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–æ–ø–æ–¥–ø–∏—Å–∫–µ').values()
    grouplink = zodiac_groups.get(int(data['params']['from_group']))
    if not grouplink:
        grouplink = ('–Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ', 'exp.horoscope')
    variables = {
        'grouplink': grouplink
    }
    answers = safe_eval(keywords[0].get('answers'), variables)
    message = f'{firstname}{answers[0]}'      
    if grouplink[1] != 'exp.horoscope':
        message = f'{firstname}{answers[1]}' 
    response = requests.post(
        'https://api.vk.com/method/wall.createComment', 
        headers=headers, 
        params={
            'owner_id': data['params']['owner_id'],
            'post_id': data['params']['post_id'],
            'from_group': data['params']['from_group'],
            'reply_to_comment': data['params']['reply_to_comment'],
            'message': message,
            'v':'5.195'
        }
    )
    log.info('celery 30 min response {}'.format(response.json()))


def callback(data, delay):
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–º–µ–Ω—Ç–∞ (–∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–ª—é—á–µ–≤–∏–∫–∏)
        log.info("In callback function thread")
        
        time.sleep(delay)
        log.info("After waiting")
        
        if not data['params']['from_group']:
            data['params']['from_group'] = data['params']['owner_id'][1:]
        headers = {
            'Authorization': f'Bearer {data["token"]}'
        }
        response = requests.post(
            'https://api.vk.ru/method/wall.createComment', 
            headers=headers, 
            params={
                'owner_id': data['params']['owner_id'],
                'post_id': data['params']['post_id'],
                'from_group': data['params']['from_group'],
                'reply_to_comment': data['params']['reply_to_comment'],
                'message': data['params']['message'],
                'v':'5.195'
            }
        )
        try:
            resp = response.json()
        except:
            resp = response.text
        # –ï—Å–ª–∏ –≤—ã–ª–µ—Ç–∞–µ—Ç –æ–¥–Ω–∞ –∏–∑ —ç—Ç–∏—Ö –æ—à–∏–±–æ–∫ —Ç–æ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ø–æ–∫–∞ —Ç–∞—Å–∫–∞ —Å–µ–ª–µ—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–æ–º –Ω–µ –ø–æ—Ç—É—à–∏—Ç –ø–æ—Ç–æ–∫
        # 9 –æ—à–∏–±–∫—É –ª—É—á—à–µ –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–ª–µ—Ç–∞–µ—Ç –∑–Ω–∞—á–∏—Ç —á—Ç–æ —Ç–æ –¥–µ–ª–∞–µ—Ç–µ –Ω–µ —Ç–∞–∫ 
        # –†–∞–Ω–¥–æ–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–∞–≥—Ä—É–∑–∫–∞ —Ö–æ—Ç—å –∫–∞–∫ —Ç–æ —Ä–∞—Å–∫–∏–¥—ã–≤–∞–ª–∞—Å—å, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å
        if resp.get('error'):
            if resp['error'].get('error_code') == 6:
                log.info("Retry")
                callback(data=data, delay=random.randint(1, 10))
            # elif resp['error'].get('error_code') == 9:
            #     log.info("Retry")
            #     callback(data=data, delay=random.randint(5, 10))
            # elif resp['error'].get('error_code') == 14:
            #     log.info("Capcha")
            #     callback(data=data, delay=random.randint(1, 15))
            elif resp['error'].get('error_code') == 29:
                log.info("Rate limit")
                callback(data=data, delay=random.randint(1, 10))
        else:
            # –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–µ–Ω—Ç, –¥–æ–±–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤ –±–∞–∑—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
            #UserDataSubscribe.add_user(data['params']['user_id'], data['params']['from_group'], data['params']['reply_to_comment'], data['params']['post_id'], data['params']['owner_id'])
            # –í–ö –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–∫–æ–ª–æ 2000 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–µ–Ω—å, –≤ –¥–æ–∫–µ –µ—Å—Ç—å –∏–Ω—Ñ–∞ –ø—Ä–æ –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ä–∞–∑—É –ø–∞—á–∫–∏ –ª—é–¥–µ–π
            # –¢–∞–∫ –æ–±—Ö–æ–¥–∏–º –ª–∏–º–∏—Ç –∏ –ø–æ–ª—É—á–∞–µ–º 600000 –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∫–æ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –≤ –¥–µ–Ω—å, —Å–µ–π—á–∞—Å —Ö–≤–∞—Ç–∞–µ—Ç —Å –∑–∞–ø–∞—Å–æ–º
            if UserDataSubscribe.objects.count() >= 30:
                # –ö–æ–≥–¥–∞ –Ω–∞–∫–æ–ø–∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —É –Ω–∏—Ö —Ä–∞–∑–æ–º –ø–æ–¥–ø–∏—Å–∫–∏ —á—Ç–æ–±—ã –Ω–µ —É–ø–∏—Ä–∞—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç –≤ —Å—É—Ç–∫–∏
                # –°–µ–π—á–∞—Å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –≤—Å–µ –æ–∑–º–æ–∂–Ω—ã–µ –∫–æ—Å—Ç—ã–ª–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å
                users_messages = UserDataSubscribe.objects.all()
                users_ids = [(int(message.user_id), message.group_id) for message in users_messages]
                user_data = [(int(message.user_id), message.group_id, message.comment_id, message.post_id, message.owner_id) for message in users_messages]

                # –ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∑–∞—Å–µ–π–≤–∏–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –ø–æ–ª–Ω–æ—Å—Ç—å—é —á–∏—Å—Ç–∏–º –º–æ–¥–µ–ª—å —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –ø–æ—Ç–æ–∫–∏ –Ω–µ —É—Å–ø–µ–ª–∏ –¥–æ–≥–Ω–∞—Ç—å 
                UserDataSubscribe.clear_model()


                log.info("{}".format(users_ids))                
                ismember = {}
                # –î–µ–ª–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –≥—Ä—É–ø–ø–µ –∫–æ—Ç–æ—Ä–∞—è –∏–º –æ—Ç–≤–µ—Ç–∏–ª–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω—É–∂–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≥—Ä—É–ø–ø—É –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—Ç–∏–ª–∞
                for group in [29038248, 54365470, 54365479, 54365482, 54365511, 54365524, 54365538, 54365550, 54365555, 54365563, 54365565, 54365575, 54365581]:
                    result = list(map(lambda x: x[0], filter(lambda x: x[1] == str(group), users_ids)))
                    # –í—Ä–æ–¥–µ –í–ö –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ id –≥—Ä—É–ø–ø—ã, –Ω–æ –ø–æ—á–µ–º—É —Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–æ –ø–æ—ç—Ç–æ–º—É —á–µ–∫–∞–µ–º –ø–æ –∏–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –µ—Å—Ç—å –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ id, –º–± –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
                    indification_groups = {
                        54365470: 'goroskop_oven1',
                        54365479: 'goroskop_telec2',
                        54365482: 'goroskop_bliznecy3',
                        54365511: 'goroskop_rak4',
                        54365524: 'goroskop_lev5',
                        54365538: 'goroskop_deva6',
                        54365550: 'goroskop_vesy7',
                        54365555: 'goroskop_skorpion8',
                        54365563: 'goroskop_strelec9',
                        54365565: 'goroskop_kozerog10',
                        54365575: 'goroskop_vodoley11',
                        54365581: 'goroskop_ryby12',
                        29038248: 'exp.horoscope'
                    }
                    # –°–µ–π–≤–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –≤—Å–µ—Ö –≥—Ä—É–ø–ø –≤ –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                    if result:
                        ismember[group] = (check_subscribe(data["token"], indification_groups.get(group), result)).get('response')
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≥—Ä—É–ø–ø–µ —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if ismember:
                    for group in [29038248, 54365470, 54365479, 54365482, 54365511, 54365524, 54365538, 54365550, 54365555, 54365563, 54365565, 54365575, 54365581]:
                        if ismember.get(group):
                            for user in ismember[group]:
                                if user.get('member') == 0:
                                    users_mess = []
                                    for i in range(len(user_data)):
                                        if user_data[i][0] == int(user.get('user_id')) and int(user_data[i][1]) == group:
                                            users_mess = user_data[i]
                                            user_data.pop(i)
                                            break
                                    if users_mess:
                                        messdata = {
                                            'token': data["token"],
                                            'params': {
                                                'user_id': users_mess[0],
                                                'from_group': users_mess[1],
                                                'reply_to_comment': users_mess[2],
                                                'post_id': users_mess[3],
                                                'owner_id': users_mess[4]
                                            }
                                        }
                                        comment_invite(messdata)
        log.info("Response: {}".format(resp))
    except Exception as e:
        log.error("error: {}".format(e))